250109

1. SSR:

Server side Rendering
Client가 요청할 떄마다 serer가 요청을 받은 페이지를 매번 새롭게 전달해주는 방식
-이미지 용량: 저용량

1. CSR :

-React.js

* Client Side Rendering
* Client가 어떤 페이지를 요청
* 해당 메인 페이지 뿐만 아니라 메인 페이지 안에 연결되어 있는 모든 페이지의 소스 정보를 한 번에 Server가 Client에게 전달
* 다른 페이지로 이동할 때, 깜박거림의 불편함이 해소, 페이지 이동 시 매우 빠르게 이동

1. SPA :

single-page-application
1개의 html > 복수의 JS 연결해서 여러 개의 페이지를 구현할 수 있도록 만든 앱 설계 방식의 페이지
-page routing

1. React.js

사용자 입장에서 특정 웹사이트의 메인페이지를 처음 열어볼 때, 만약 메인페이지 안에 고용량의 동영상 혹은 이미지가 들어있었다면 => 해당 메인페이지를 로딩해오는데, 굉장히 더디게 출력

* Client가 최초에 Server에게 받아와야하는 데이터들이 굉장히 용량이 큰 경우
* TTI : Time To Interval
    => client가 server에게 페이지를 요청한 이후에 FCP단계까지 도달하는데 걸리는 인터벌 시간
* FCP가 비효율적이다
    => First Contenful Paint
    => client가 server로부터 요청한 데이터를 브라우저에 최초로 출력시킨 상태

1. SSR 회귀

-server가 client의 요청에 따라서 data를 전달하는 방식은 예전과 다를 바 없음
-Pre-Rendering(*사전렌더링)

transition : 전환
>A가 B로 변경되는 순간을 제어할 수 있도록 하는 속성
>얼만큼 천천히 // 빨리 // 어느정도의 시간동안 // 어느 정도의 시간을 기다렸다가 // 어느정도의 가속도로 // 감속으로

transition-duration :얼마의 시간동안 상태변화를 진행되도록 할 것인가
transition-delay: 얼마의 지연 후 상태변화를 진행하게 할 것인가
transition-timing-function: 어떤 가.감속을 적용할 것인가
transition-property : 어떤 속성 요소에 상태 변화를 적용할 것인가

rotation 
29프레임
1초영상 - 30개의 정지된 스틸이미지로 완성

gsap, threejs, anime
-화면에 어떤 인터랙티브하며, 크리에이티브한 요소를 창작해서 넣는 작업 ? 정답 ?

animation-name : keyframes를 활용해서 정의한 애니메이션 이름을 입력
animation-duration : 실제 실행하고자 하는 애니메이션을 얼마의 시간동안 실행
animation-timing-function : 구현되는 애니메이션의 가속도를 어떻게 설정
animation-iteration-count : 애니메이션의 반복 횟수
animation-direction : 애니메이션의 진행 방향(default = 일방통행 //반대로도 실행)
animation-play-state : 애니메이션의 실행 상태를 제어할 때 사용
animation-delay : 얼마의 시간 이후에 애니메이션을 실행시킬 것인가

transform : 변환

html을 통해서 만든 요소(element)들의 형태 || 위치를 변환시킬 때 사용

1. 각도
2. 크기
3. 기울기
4. 위치

=> x,y, "z"

perspective = 관점 // 원근법
=> 사진 촬영때
=> 2D요소를 하나의 장면으로 담아주는 기계
=> 가까이 있는 사람 vs 멀리있는 사람 => 크게 vs 작게

=> CSS 사용자가 모니터를 바라보는 상황
상대적으로 사용자에게 가깝게 느껴지도록 하는 속성 → 위치속성 z-index 값이 크면 클수록 가까워짐
*perspective
=> 기본적으로 3d값을 가지고 있는 요소들의 z값의 defult는 0에서 시작
=> perspective의 값이 클수록 해당 요소를 바라보는 간격이 커진다. 라고 이해 해야 함

