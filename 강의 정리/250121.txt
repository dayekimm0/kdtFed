> scope // scopechain

*this객체

조건문 : 어떤 조건에 부합하냐, 부합하지 않느냐... 실행시킬 실행명령을 별도로 관리하는 것
조건문이 실행되기 위해서는 문법
> 조건식 & 실행문

if문 :  만약 ~라면
if ~ else문 : 만약 ~ 라면, 하지만 만약 ~ 아니라면
else ~ if문 : if 혹은 else 외 조건식을 제공하고자 할 때

switch문 : 여러가지의 선택지를 제공하고,
해당 선택지 가운데에서 어떤 한가지를 선택했을 때 실행, 결과값 도출


프로그래밍 언어
전통적으로 프로그래밍 언어 두가지 부류
실행문 지향언어 vs 표현식 지향언어
대부분의 프로그래밍 언어 = 실행문 지향언어
c언어//자바 => 객체지향언어 => js 실행문 지향언어
함수선언, 호출 => 로컬컴퓨터 cpu실행 => 실행된 결과를 개발자에게 X
표현식 지향언어 -> 루비, 코틀린
자바스크립트 -> 실행문 & 표현식 모두 사용할 수 있는 언어 -> 다중 패러다임 언어

조건문을 실행하기에 앞서서 조건식 자체가 성립될 수 없는 값이 들어온다면,
더 이상의 조건문을 실행시키지 않는 조치 -> 메모리 효율
= 예외조항처리

literal 객체 & 반복문을 지배하는 자가 JS의 중급단계를 지배한다
반복하게 하려고 할 때
자료구조 & 알고리즘 커리큘럼
어떤 경우에 배열
문법
어떤 자료구조가 현 문제를 해결하는데 가장 효율
시간 복잡도 => 현 자료구조 및 알고리즘이 해당 문제를 해결하는데 걸리는 시간
빅오 // 빅세타 // 빅오메가

기본형 반복문
for문 - 반드시 자바스크립트 내 Iterable(~을 순회하는) 객체 사용가능
for(초기값; 조건식; 증감문){
  반복문실행
}

우리가 현재 공부하고 있는 JS를 객체지향언어 => C || Java => 객체지향 언어 
=> 어떠한 함수가 실행되고, 처리해야 할 자료가 발생되면 기본적으로 객체라는 자료구조의 형태로 변환해서 관리. 저장. 보관한다

이러한 객체 지향언어들은 거의 대부분 this객체를 가지고 있음 => 어떤 함수 혹은 속성값이 실행되었을 때,
실행된 함수 및 속성의 주인이 누구인지를 효율적으로 가리켜서 쉽게 찾아올 수 있게 해주는 역할

1. JS를 활용해서 함수 선언 => 호출하는 순간 => "실행 컨텍스트=객체" 실행
2. "실행 컨텍스트" => Call Stack 공간에서 가장 먼저 실행
3. 그 다음 호출된 함수가 그 위로 쌓이게 되는 구조
4. "실행 컨텍스트" => 어떠한 정보로 구성되었는가
5.
VariableEnvironment(환경변수)
- environmentRecord (*Snapshot) : 해당 함수가 가지고 있는 내부 함수 || 변수 등등 정보
- outerEnvironmentReference(*Snapshot)
: 해당 함수가 참조하고 있는 매개변수 || 인자값이 외부에서 들어온 경우, 어느 경로에서 유입되었는지에 대한 전반적인 정보

LexicalEnvironment(사전환경정보)
- environmentRecord
- outerEnvironmentReference

ThisBinding(this로 가리켜야 할 대상 누구인지의 정보)

* Scope(스코프) = 유효범위
- 함수가 어디에서 어디까지를 커버해야 하는지를 결정

Scope Chain(스코프 체인)
- 스코프 범위 내 요소를 하나씩 차례대로 검색해나가는 프로세스
- 현재 호출된 함수의 과거 선언 당시의 LexicalEnvironment 정보까지 참조


* 그래서 this를 어떻게 식별해야 하는가?

1. JS 내 전역공간에서 this는 무조건 전역(*모든 것을 커버할 수 있다) 객체
> JS > 어디에서 사용하려고 만들어진 => 웹 브라우저 > window
> node.js > global

전역에서 사용가능한 변수 => 전역개체 안에 하나의 속성값

함수를 독립적으로 실행시킬 때에는 this는 전역객체인 window를 가르킨다
함수가 특정 객체의 속성 메서드로 실행될 때에는 해당 객체를 가르킨다

1. this를 호출하는 상황이 전역요소인지 => window
2. 함수를 독립적으로 호출한 상황에서 this를 요청 => window
3. 특정 객체 안에 있는 속성 중 메서드를 활용해서 this를 요청 => 해당 객체
메서드 method = 객체 안에 있는 함수

ES6 2015년
화살표 함수 -> 기존 함수들의 실행컨텍스트와 한가지 엄청나게 큰 변화
실행컨텍스트 객체 => thisbinding 없음 상위스코프의 this 그대로 받아옴